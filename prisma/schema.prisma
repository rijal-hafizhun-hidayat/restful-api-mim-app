// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model post {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar()
  content    String   @db.VarChar()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  post_file  post_file?
  post_types post_type[]
}

model meme_type {
  id               Int         @id @default(autoincrement())
  name             String      @db.VarChar()
  background_color String      @db.VarChar()
  text_color       String      @db.VarChar()
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  post_type        post_type[]
}

model post_file {
  id         Int      @id @default(autoincrement())
  path       String   @db.VarChar()
  type_file  String   @db.VarChar()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  post_id    Int      @unique

  post post @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model post_type {
  id           Int      @id @default(autoincrement())
  post_id      Int
  meme_type_id Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  post      post      @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  meme_type meme_type @relation(fields: [meme_type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model user {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar()
  email      String     @unique @db.VarChar()
  password   String     @db.VarChar()
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user_role  user_role?
}

model role {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar()
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  user_role  user_role[]
}

model user_role {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user user @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  role role @relation(fields: [role_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
